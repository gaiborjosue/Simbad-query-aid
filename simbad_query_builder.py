import os
from openai import OpenAI
from dotenv import load_dotenv
import pandas as pd
import re

# Load environment variables from .env
load_dotenv()
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY', 'YOUR_OPENAI_API_KEY'))

# Load object types and categories from CSV
nodes_df = pd.read_csv('otypes_nodes.csv')

# Build object type lookup and category list
otype_lines = []
for idx in range(len(nodes_df)):
    code_val = nodes_df.at[idx, 'Id']
    label_val = nodes_df.at[idx, 'Label']
    desc_val = nodes_df.at[idx, 'Description']
    cat_val = nodes_df.at[idx, 'Category']
    code_str = str(code_val) if pd.notna(code_val) else ''
    label_str = str(label_val) if pd.notna(label_val) else ''
    desc_str = str(desc_val) if pd.notna(desc_val) else ''
    cat_str = str(cat_val) if pd.notna(cat_val) else ''
    if code_str.strip() != '' and desc_str.strip() != '':
        otype_lines.append(f"- {code_str}: {desc_str} ({cat_str})")
    elif code_str.strip() != '' and label_str.strip() != '':
        otype_lines.append(f"- {code_str}: {label_str} ({cat_str})")

category_lines = [f"- {cat}" for cat in nodes_df['Category'].dropna().unique()]

# Read criteria.md for valid fields and operators
with open('criteria.md', 'r', encoding='utf-8') as f:
    criteria_md = f.read()

# Read simbad_QueryObjectsfromCriteriaHelp.md for SIMBAD help
with open('simbad_QueryObjectsfromCriteriaHelp.md', 'r', encoding='utf-8') as f:
    simbad_help_md = f.read()

# Example prompt for the LLM, now enriched with object types, categories, and both criteria references
SYSTEM_PROMPT = f'''
You are an expert in SIMBAD database queries. Given a user's natural language request, translate it into a valid SIMBAD query string.

Use ONLY the fields, operators, and syntax described in the following reference tables and help documentation. Do not invent new field names or operators.

--- BEGIN CRITERIA REFERENCE ---
{criteria_md}
--- END CRITERIA REFERENCE ---

--- BEGIN SIMBAD QUERY HELP ---
{simbad_help_md}
--- END SIMBAD QUERY HELP ---

When combining multiple criteria, always use '&&' for AND and '||' for OR (not single & or |).

Available object types:
{chr(10).join(otype_lines[:40])}
... (and more)

Available categories:
{chr(10).join(category_lines)}

Examples:
User: Show me all white dwarfs with proper motion > 50 mas
Output: otype = 'WD*' && pm > 50

User: Main sequence stars with parallax quality A or B
Output: otype = 'MS*' && (plxqual = 'A' || plxqual = 'B')

User: Stars in the PPM or HIP catalog
Output: cat = 'PPM' || cat = 'HIP'

User: Right ascension between 15 and 30, declination above 70
Output: ra > 15 && ra < 30 && dec > 70
'''

# Get user query
user_query = input("Enter your SIMBAD search in natural language: ")

# Call OpenAI API using the new client interface
response = client.chat.completions.create(
    model="o4-mini",
    messages=[
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": user_query}
    ]
)

# Extract and print the result
content = response.choices[0].message.content
if content:
    criteria = content.strip()
    # Post-process: replace single & and | with && and ||
    criteria = re.sub(r'(?<!&)&(?!&)', '&&', criteria)
    criteria = re.sub(r'(?<!\|)\|(?!\|)', '||', criteria)
    print("\nGenerated SIMBAD search criteria:")
    print(criteria)
else:
    print("\nNo criteria generated by the model.") 